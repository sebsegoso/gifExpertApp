{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","utils/constants.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trimmedInputValue","trim","length","cats","alert","id","type","placeholder","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","img","images","downsized_medium","console","log","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAgCeA,EA7BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAkBvC,OACI,sBAAMC,SAXW,SAAAC,GACjBA,EAAEC,iBACF,IAAMC,EAAoBL,EAAWM,OAEjCD,EAAkBE,QAClBT,GAAe,SAAAU,GAAI,OAAKH,GAAL,mBAA2BG,OAC9CP,EAAc,KACXQ,MAAM,gCAIb,SACI,uBAAOC,GAAG,SAASC,KAAK,OAAOC,YAAY,kBAAkBC,MAAOb,EAAYc,SAhB9D,SAAC,GAA2B,IAAfD,EAAc,EAAxBE,OAAUF,MACnCZ,EAAcY,S,QCGPG,EATK,SAAC,GAAwB,IAAtBN,EAAqB,EAArBA,GAAIO,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC9B,OACI,yBAAQC,UAAU,6CAAlB,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,qCAAaA,GAAgB,2BAFmCP,I,uBCDtEY,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,sEAEFN,EAFE,iDAE8CO,UAAUF,GAFxD,6BCHO,oCDGP,SAGeG,MAAMR,GAHrB,cAGFS,EAHE,gBAIeA,EAASC,OAJxB,uBAIAC,EAJA,EAIAA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHtB,GAAIsB,EAAItB,GACRO,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAVlC,kBAcDY,GAdC,kCAiBRK,QAAQC,IAAR,MAjBQ,0DAAH,sDEyBEC,EAvBC,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACZxB,mBAAS,CAC/B8B,KAAM,GACNS,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAgBtC,OAVAC,qBAAU,WACNnB,EAAQC,GACHmB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACnBX,KAAMc,EACNL,SAAS,SAElB,CAACf,IAIGgB,EDb2BK,CAAarB,GAAjCU,EADgB,EACtBJ,KAAcS,EADQ,EACRA,QAEtB,OACI,qCACI,6BAAKf,IACJe,EACK,oBAAGnB,UAAU,mCAAb,sBAAyD,sBAAMA,UAAU,oCAAhB,oBACzD,qBAAKA,UAAU,YAAf,UACS,OAANc,QAAM,IAANA,OAAA,EAAAA,EAAQ1B,QAEH0B,EAAOF,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAA8BA,GAAZA,EAAItB,OAGxB,yDAA2B,4BAAIa,aEM1CsB,EArBM,WAAO,IAAD,EACa9C,mBAAS,IADtB,mBAChB+C,EADgB,KACJhD,EADI,KAOvB,OACI,iCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,kCACKgD,EAAWf,KAAI,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCXlCwB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4450e5d6.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ({ target: { value } }) => {\r\n        setInputValue(value)\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        const trimmedInputValue = inputValue.trim()\r\n\r\n        if (trimmedInputValue.length) {\r\n            setCategories((cats => [trimmedInputValue, ...cats]))\r\n            setInputValue('')\r\n        } else alert('Por favor, ingresa un texto')\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input id=\"search\" type=\"text\" placeholder=\"Busca tu gif...\" value={inputValue} onChange={handleInputChange} />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n    return (\r\n        <figure className=\"card animate__animated animate__fadeInDown\" key={id}>\r\n            <img src={url} alt={title} />\r\n            <figcaption>{title ? title : '--No existe titulo--'}</figcaption>\r\n        </figure>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import { GIPHY_APKI_KEY } from '../utils/constants';\r\n\r\n\r\nconst getGifs = async (category) => {\r\n    try {\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${GIPHY_APKI_KEY}`;\r\n        const response = await fetch(url);\r\n        const { data } = await response.json();\r\n\r\n        const gifs = data.map(img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n        \r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport {getGifs}","const GIPHY_APKI_KEY = 'yL1flqG4cUDzYWFWo1bCsElgqQdAWrtg';\r\n\r\nexport {GIPHY_APKI_KEY}","import React from 'react';\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\n\r\nconst GifGrid = ({ category }) => {\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h2>{category}</h2>\r\n            {loading\r\n                ? <p className=\"animate__animated animate__flash\">Cargando <span className=\"animate__animated animate__shakeX\">...</span></p>\r\n                : <div className=\"card-grid\">\r\n                    {images?.length\r\n                        //Si hay resultados\r\n                        ? images.map(img => (\r\n                            <GifGridItem key={img.id} {...img} />\r\n                        ))\r\n                        //En caso de no haber resultados\r\n                        : <h3>No hay resultados para <u>{category}</u></h3>\r\n                    }\r\n                </div>}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => setState({\r\n                data: imgs,\r\n                loading: false\r\n            }))\r\n    }, [category])\r\n\r\n\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([])\r\n\r\n    // const handleAdd = () =>{\r\n    //     setCategories(cats => [ 'Elementonuevo',...cats])\r\n    // }\r\n\r\n    return (\r\n        <main>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            <section>\r\n                {categories.map(category => (\r\n                    <GifGrid key={category} category={category} />\r\n                ))}\r\n            </section>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","//\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n//Style\nimport './index.css';\n// Components\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}